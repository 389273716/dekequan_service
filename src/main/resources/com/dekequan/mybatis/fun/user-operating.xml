<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="com.dekequan.dao.UserDao">
	<!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 
		resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 -->
	<!-- 用户账号密码查询 -->
	<select id="findUserByLogin" parameterType="java.util.Map" resultType="user">
		select * from dk_user where userName=#{userName,jdbcType=VARCHAR}
		<if test="password != null">
			and password=#{password,jdbcType=VARCHAR};
		</if>
	</select>
		
	<!-- 根据id查询得到一个user对象 -->
	<select id="findUserById" parameterType="int" resultType="user">
		select * from dk_user where userId = #{userId}
	</select>

	<!-- 新增 -->
	<insert id="saveUser" parameterType="User">
		insert into dk_user (
		userName, password, nickName, 
		rank, level, img, 
		createTime, accessToken, dkToken, 
		expireTime, sex) 
		values(
		#{userName}, #{password}, #{nickName}, 
		#{rank}, #{level}, #{img}, 
		#{createTime}, #{accessToken}, #{dkToken}, 
		#{expireTime}, #{sex})
	</insert>
	
	<!-- 修改失效时间 -->
	<update id="updateUserExpireTime" parameterType="Map">
	    update dk_user set expireTime = #{expireTime} where userId = #{userId}
	</update>
	
	<!-- 修改个人信息 -->
	<update id="updateUser" parameterType="Map">
	    update dk_user set nickName = #{nickName}, sex = #{sex}, img = #{img} where userId = #{id}
	</update>
</mapper>